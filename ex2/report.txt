To start, we created a flowchart from the source code for each specific method.
In order to create the test cases for statement testing we chose a specific node we wanted to
reach and created a test for that, repeat for all remaining nodes.
To create cases for branch testing we chose a (viable) path we wanted our test to travel on,
create a test for that and repeat for all remaining paths.
Some tests could encompass all statements, branches, or even both at the same time.

a)
Statement Test #1: A simple test, instantly adds an element to the set by skipping the loop.
Statement Test #2: Inserts an element before another.
Statement Test #3: Inserts an element at the end

Branch Test #1: A test for all the edges in our flowchart. A collection of all three previous statements tests.

Found bugs: The original method has issues with putting elements inbetween or before others properly, as an example:
    insert(2)
    insert(1)
would result in the set [1, 2, 1]. This is due to the fact that the final add method is always reached,
no matter the path. This is solved by adding a "return" statement immediately after an insert with add.
The code is also simplified by moving the second if case into the first one.

b)
Statement Test #1: A test for checking if values smaller than the first in the set are accepted, returns false.
Statement Test #2: A test for checking if a value in the set makes the method return true.
Statement Test #2: A test to make sure the method finishes the for loop and returns false.

Branch Test #1: A test to check all the paths. A collection of the all three previous statement tests.

Bugs found: None

c)
Statement/Branch Test #1: An all-encompassing test which will go inside every if-case, both false and true.

Bugs found: After removing an element from the array a, the index counter is falsely incremented.
Due to how remove works in arraylist, moving all the elements to the right of the removed element to the left,
incrementing the index counter means that you will skip over the element that comes immediately after the one
removed. Ex:
    a = [1 2 5]
    s = [2 3 5]
    result = [1 5]
This is fixed by simply removing the i++ after removing an element.

d)
Statement/Branch Test #1: This will return true, the three elements in the set is a Arith triple (5 - 2 = 8 - 5)
Statement/Branch Test #2: This will return false.

Bugs found: When checking if the set contains a number to finish the Arith triple, a.get(i) and a.get(j)
can be the same number. Ex.
    s = [1 3 9]
    s.containsArithTriple() will return true, since 2*1 - 1 = 1 (which is in the set)
This is fixed by making the counter j start after i as well making j end before it can reach the end of the array.